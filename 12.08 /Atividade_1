# Modo Easy: Implementação básica do Insertion Sort com listas.
def InsertSort_easy(lista):
    n = len(lista)
    
    for j in range(1, n):
        i = j - 1
        tmp = lista[j]
        
        print(f"Passo {j}: Inserindo {tmp} na posição correta...")
        
        while i >= 0 and tmp < lista[i]:
            lista[i + 1] = lista[i]
            i -= 1
        
        lista[i + 1] = tmp
        print(f"Lista após o passo {j}: {lista}")

# Modo Divertido: Implementação do Insertion Sort com Lista Encadeada.
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def insertion_sort(self):
        sorted_list = LinkedList()
        current = self.head
        step = 0
        while current:
            next_node = current.next
            print(f"Passo {step}: Inserindo {current.data} na posição correta...")
            sorted_list.sorted_insert(current)
            print(f"Lista encadeada após o passo {step}: {sorted_list.to_list()}")
            current = next_node
            step += 1
        self.head = sorted_list.head

    def sorted_insert(self, new_node):
        if not self.head or self.head.data >= new_node.data:
            new_node.next = self.head
            self.head = new_node
        else:
            current = self.head
            while current.next and current.next.data < new_node.data:
                current = current.next
            new_node.next = current.next
            current.next = new_node

    def to_list(self):
        lst = []
        current = self.head
        while current:
            lst.append(current.data)
            current = current.next
        return lst

# Testes com diferentes casos de entrada
def test_sort_functions():
    # Lista de testes
    test_cases = {
        "Já ordenados": [1, 2, 3, 4, 5],
        "Ordem inversa": [5, 4, 3, 2, 1],
        "Elementos duplicados": [3, 3, 2, 1, 4, 4, 5],
        "Aleatórios sem repetição": [7, 2, 4, 1, 6, 3, 5]
    }

    for case, lst in test_cases.items():
        print(f"\nTeste: {case}")
        
        # Teste no modo Easy
        print("\nModo Easy:")
        lista_easy = lst.copy()
        InsertSort_easy(lista_easy)
        
        # Teste no modo Divertido (Lista Encadeada)
        print("\nModo Divertido:")
        linked_list = LinkedList()
        for item in lst:
            linked_list.append(item)
        linked_list.insertion_sort()

def main():
    test_sort_functions()

main()
